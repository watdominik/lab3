// class version 55.0 (55) ////// Opis różnic znajduje sie na samym dole
// access flags 0x31
public final class Main {

  // compiled from: Main.kt

  @Lkotlin/Metadata;(mv={1, 8, 0}, k=1, xi=48, d1={"\u0000\u0018\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\u0008\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\u0015\n\u0000\u0018\u00002\u00020\u0001B\u0005\u00a2\u0006\u0002\u0010\u0002J\u000e\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006\u00a8\u0006\u0007"}, d2={"LMain;", "", "()V", "insertionSort", "", "array", "", "Lab3_Kotlin"})

  // access flags 0x1
  public <init>()V
   L0
    LINENUMBER 1 L0
    ALOAD 0
    INVOKESPECIAL java/lang/Object.<init> ()V
    RETURN
   L1
    LOCALVARIABLE this LMain; L0 L1 0
    MAXSTACK = 1
    MAXLOCALS = 1

  // access flags 0x11
  public final insertionSort([I)V
    // annotable parameter count: 1 (invisible)
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
   L0
    ALOAD 1
    LDC "array"
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkNotNullParameter (Ljava/lang/Object;Ljava/lang/String;)V
   L1
    LINENUMBER 3 L1
    ICONST_1
    ISTORE 2
   L2
    ALOAD 1
    ARRAYLENGTH
    ISTORE 3
   L3
   FRAME APPEND [I I]
    ILOAD 2
    ILOAD 3
    IF_ICMPGE L4
   L5
    LINENUMBER 4 L5
    ALOAD 1
    ILOAD 2
    IALOAD
    ISTORE 4
   L6
    LINENUMBER 5 L6
    ILOAD 2
    ICONST_1
    ISUB
    ISTORE 5
   L7
    LINENUMBER 6 L7
   FRAME APPEND [I I]
    ILOAD 5
    IFLT L8
    ALOAD 1
    ILOAD 5
    IALOAD
    ILOAD 4
    IF_ICMPLE L8
   L9
    LINENUMBER 7 L9
    ALOAD 1
    ILOAD 5
    ICONST_1
    IADD
    ALOAD 1
    ILOAD 5
    IALOAD
    IASTORE
    IINC 5 -1
   L10
    LINENUMBER 8 L10
    GOTO L7
   L8
    LINENUMBER 10 L8
   FRAME SAME
    ALOAD 1
    ILOAD 5
    ICONST_1
    IADD
    ILOAD 4
    IASTORE
   L11
    LINENUMBER 3 L11
    IINC 2 1
    GOTO L3
   L4
    LINENUMBER 12 L4
   FRAME CHOP 2
    RETURN
   L12
    LOCALVARIABLE key I L6 L11 4
    LOCALVARIABLE j I L7 L11 5
    LOCALVARIABLE i I L2 L4 2
    LOCALVARIABLE this LMain; L0 L12 0
    LOCALVARIABLE array [I L0 L12 1
    MAXSTACK = 4
    MAXLOCALS = 6
}
/*
Wersja bytecodeu: Kod z Kotlina ma wersję 55.0, podczas gdy kod z Javy ma wersję 64.0.

Anotacje: Kod z Kotlina zawiera adnotacje Kotlin Metadata i NotNull, które są używane do informacji o metadanych i sprawdzania nulli.
Natomiast kod z Javy nie zawiera adnotacji.

Klasy wewnętrzne: Bytecode z Javy zawiera deklarację klasy wewnętrznej java/lang/invoke/MethodHandles$Lookup jako pole final static INNERCLASS.
Natomiast w bytecode'ie z Kotlina nie ma takiej deklaracji.

Sygnatura konstruktora: W bytecode'ie z Javy sygnatura konstruktora jest oznaczona jako <init>()V, co oznacza konstruktor bez argumentów zwracający void.
W przypadku bytecode'u z Kotlina sygnatura jest oznaczona jako <init>()V, ale jest to bardziej szczegółowy zapis, wskazujący na adnotację Metadata Kotlin.

Instrukcje skoków: Instrukcje skoków w bytecode'ie z Kotlina są oznaczone przez etykiety Lx, natomiast w bytecode'ie z Javy są oznaczone przez etykiety Lx, gdzie x to kolejne liczby.

Liczba zmiennych lokalnych: Liczba zmiennych lokalnych w bytecode'ie z Javy jest większa o 1 w porównaniu do bytecode'u z Kotlina.

Sposób wczytywania wartości ze stosu: Bytecode z Javy używa instrukcji BIPUSH do wczytywania wartości stałych na stos,
podczas gdy bytecode z Kotlina używa instrukcji LDC do wczytywania wartości stałych.

Nazwa tablicy: W bytecodie z Kotlina użyto nazwy "array" dla tablicy, natomiast w bytecodie z Javy nazwa tablicy nie jest specyfikowana.