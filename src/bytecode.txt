// class version 64.0 (64)
// access flags 0x21
public class Main {

  // compiled from: Main.java
  // access flags 0x19
  public final static INNERCLASS java/lang/invoke/MethodHandles$Lookup java/lang/invoke/MethodHandles Lookup

  // access flags 0x1 Flagi dostępu: 0x1 (publiczny)
  public <init>()V //Sygnatura metody: <init>()V (konstruktor bez argumentów, zwracający void)
   L0 // Etykieta L0
    LINENUMBER 1 L0 // numer linii 1
    ALOAD 0 // Wczytanie referencji this na stos (obiekt klasy Main)
    INVOKESPECIAL java/lang/Object.<init> ()V //   Wywołanie specjalne (INVOKESPECIAL) konstruktora klasy bazowej java/lang/Object, aby zainicjalizować obiekt
    RETURN // Zakończenie metody (instrukcja RETURN)
   L1
    LOCALVARIABLE this LMain; L0 L1 0 // Lokalna zmienna this typu LMain; jest zdefiniowana w zakresie od etykiety L0 do L1
    MAXSTACK = 1 //   Maksymalna wartość stosu (MAXSTACK) wynosi 1
    MAXLOCALS = 1 // Maksymalna liczba zmiennych lokalnych (MAXLOCALS) wynosi 1


  // access flags 0x1
  public insertionSort([I)V // insertionSort([I)V (metoda przyjmująca tablicę int i zwracająca void)
   L0 // Etykieta L1
    LINENUMBER 3 L0 // numer linii 3
    ICONST_1 // Wczytanie wartości stałej 1 na stos
    ISTORE 2 // Zapisanie wartości ze stosu do lokalnej zmiennej o indeksie 2 (i)
   L1 // Etykieta L2
   FRAME APPEND [I] // Dodanie ramki (FRAME APPEND) zawierającej jedną wartość (i) dla tablicy int
    ILOAD 2 // Wczytanie wartości lokalnej zmiennej o indeksie 2 (i) na stos
    ALOAD 1 // Wczytanie referencji do tablicy int (parametr metody) na stos
    ARRAYLENGTH // Wywołanie instrukcji ARRAYLENGTH, aby uzyskać długość tablicy
    IF_ICMPGE L2 // Porównanie wartości i z długością tablicy na stosie przy użyciu instrukcji IF_ICMPGE
                 //   Jeśli warunek jest spełniony (czyli i jest większe lub równe długości tablicy), skocz do etykiety L2
   L3
    LINENUMBER 4 L3
    ALOAD 1 // Wczytanie referencji do tablicy int na stos
    ILOAD 2 // Wczytanie wartości i na stos
    IALOAD // Wczytanie wartości z tablicy o indeksie i przy użyciu instrukcji IALOAD
    ISTORE 3 // Zapisanie wartości ze stosu do lokalnej zmiennej o indeksie 3 (key)
   L4
    LINENUMBER 5 L4
    ILOAD 2 // Wczytanie wartości i na stos
    ICONST_1 // Wczytanie wartości stałej 1 na stos
    ISUB // Odejmowanie wartości ze stosu (i - 1)
    ISTORE 4 // Zapisanie wartości ze stosu do lokalnej zmiennej o indeksie 4 (j)
   L5
    LINENUMBER 7 L5
   FRAME APPEND [I I] // Dodanie ramki (FRAME APPEND) zawierającej dwie wartości (i i key) dla tablicy int
    ILOAD 4 // Wczytanie wartości lokalnej zmiennej o indeksie 4 (j) na stos
    IFLT L6 // Skok warunkowy IF_LT (IFLT) do etykiety L6, jeśli wartość j jest mniejsza niż 0 (czyli jest ujemna)
    ALOAD 1 // Wczytanie referencji do tablicy int na stos
    ILOAD 4 // Wczytanie wartości lokalnej zmiennej o indeksie 4 (j) na stos
    IALOAD // Wczytanie wartości z tablicy o indeksie j przy użyciu instrukcji IALOAD
    ILOAD 3 // Zapisanie wartości ze stosu do lokalnej zmiennej o indeksie 3 (key)
    IF_ICMPLE L6 // Porównanie wartości na stosie (j-ty element tablicy) z key przy użyciu instrukcji IF_ICMPLE
                 // Jeśli warunek jest spełniony (czyli j-ty element tablicy jest mniejszy lub równy key), skocz do etykiety L6
   L7
    LINENUMBER 8 L7
    ALOAD 1 // Wczytanie referencji do tablicy int na stos
    ILOAD 4 // Wczytanie wartości lokalnej zmiennej o indeksie 4 (j) na stos
    ICONST_1 // Wczytanie wartości 1 na stos
    IADD // Dodanie wartości j i 1 na stos
    ALOAD 1 // Wczytanie referencji do tablicy int na stos
    ILOAD 4 // Wczytanie wartości lokalnej zmiennej o indeksie 4 (j) na stos
    IALOAD // Wczytanie wartości z tablicy o indeksie j przy użyciu instrukcji IALOAD
    IASTORE // Wczytanie wartości key na stos
   L8
    LINENUMBER 9 L8
    ILOAD 4 // Wczytanie wartości lokalnej zmiennej o indeksie 4 (j) na stos
    ICONST_1 // Wczytanie wartości 1 na stos
    ISUB // Odjęcie wartości ze stosu (j - 1)
    ISTORE 4 // Zapisanie wartości ze stosu do lokalnej zmiennej o indeksie 4 (j)
    GOTO L5 // Skok bezwarunkowy (GOTO) do etykiety L5
   L6
    LINENUMBER 12 L6
   FRAME SAME // Ramka pozostaje taka sama (FRAME SAME)
    ALOAD 1 // Wczytanie referencji do tablicy int na stos
    ILOAD 4 // Wczytanie wartości lokalnej zmiennej o indeksie 4 (j) na stos
    ICONST_1 // Wczytanie stałej wartości 1 na stos
    IADD // Dodanie wartości 1 do j przy użyciu instrukcji IADD
    ILOAD 3 // Wczytanie wartości key na stos
    IASTORE // Zapisanie wartości key do tablicy na indeksie j przy użyciu instrukcji IASTORE
   L9
    LINENUMBER 3 L9
    IINC 2 1 // Zwiększenie wartości lokalnej zmiennej o indeksie 2 (i) o 1 przy użyciu instrukcji IINC
    GOTO L1 // Skok bezwarunkowy (GOTO) do etykiety L1, czyli do początku pętli while
   L2
    LINENUMBER 14 L2
   FRAME CHOP 3 / Ramka jest skracana (FRAME CHOP) o 3 wartości, ponieważ metoda kończy się
    RETURN // Instrukcja RETURN kończy wykonywanie metody
   L10
    LOCALVARIABLE key I L4 L9 3 // Lokalne zmienne: key (typ int), j (typ int), i (typ int), this (typ Main), array (typ int[])
    LOCALVARIABLE j I L5 L9 4
    LOCALVARIABLE i I L1 L2 2
    LOCALVARIABLE this LMain; L0 L10 0
    LOCALVARIABLE array [I L0 L10 1
    MAXSTACK = 4 // Maksymalna wartość stosu (MAXSTACK) wynosi 4
    MAXLOCALS = 5 // Maksymalna liczba zmiennych lokalnych (MAXLOCALS) wynosi 5

  // access flags 0x9
  public static main([Ljava/lang/String;)V
   L0
    LINENUMBER 17 L0
    NEW Main // Tworzenie nowej instancji klasy Main przy użyciu instrukcji NEW
    DUP // Duplikowanie referencji na stosie przy użyciu instrukcji DUP
    INVOKESPECIAL Main.<init> ()V // Wywołanie konstruktora klasy Main przy użyciu instrukcji INVOKESPECIAL
    ASTORE 1 // Zapisanie referencji do nowo utworzonej instancji w lokalnej zmiennej o indeksie 1 (ASTORE 1)
   L1
    LINENUMBER 18 L1
    BIPUSH 6 // Wczytanie wartości stałej 6 na stos przy użyciu instrukcji BIPUSH
    NEWARRAY T_INT // Tworzenie nowej tablicy int o rozmiarze 6 przy użyciu instrukcji NEWARRAY T_INT
    DUP // Duplikowanie referencji do tablicy na stosie przy użyciu instrukcji DUP
    ICONST_0 // Wczytanie wartości 0 na stos przy użyciu instrukcji ICONST_0
    BIPUSH 6 // Wczytanie wartości 6 na stos przy użyciu instrukcji BIPUSH
    IASTORE // Zapisanie wartości 6 na indeks 0 tablicy przy użyciu instrukcji IASTORE
    DUP // Duplikowanie referencji do tablicy na stosie przy użyciu instrukcji DUP
    ICONST_1 // Wczytanie wartości 1 na stos przy użyciu instrukcji ICONST_1
    ICONST_1 // Wczytanie wartości 1 na stos przy użyciu instrukcji ICONST_1
    IASTORE // Zapisanie wartości 1 na indeks 1 tablicy przy użyciu instrukcji IASTORE
    DUP // Duplikowanie referencji do tablicy na stosie przy użyciu instrukcji DUP
    ICONST_2 Wczytanie wartości 2 na stos przy użyciu instrukcji ICONST_2
    BIPUSH 9 Wczytanie wartości 9 na stos przy użyciu instrukcji BIPUSH
    IASTORE // Zapisanie wartości 9 na indeks 2 tablicy przy użyciu instrukcji IASTORE
    DUP // Duplikowanie referencji do tablicy na stosie przy użyciu instrukcji DUP
    ICONST_3 // Wczytanie wartości 3 na stos przy użyciu instrukcji ICONST_3
    ICONST_3 // Wczytanie wartości 3 na stos przy użyciu instrukcji ICONST_3
    IASTORE // Zapisanie wartości 3 na indeks 3 tablicy przy użyciu instrukcji IASTORE
    DUP // Duplikowanie referencji do tablicy na stosie przy użyciu instrukcji DUP
    ICONST_4 // Wczytanie wartości 4 na stos przy użyciu instrukcji ICONST_4
    ICONST_2 // Wczytanie wartości 2 na stos przy użyciu instrukcji ICONST_2
    IASTORE // Zapisanie wartości 2 na indeks 4 tablicy przy użyciu instrukcji IASTORE
    DUP // Duplikowanie referencji do tablicy na stosie przy użyciu instrukcji DUP
    ICONST_5 // Wczytanie wartości 5 na stos przy użyciu instrukcji ICONST_5
    BIPUSH 7 // Wczytanie wartości 7 na stos przy użyciu instrukcji BIPUSH
    IASTORE // Zapisanie wartości 7 na indeks 5 tablicy przy użyciu instrukcji IA
    ASTORE 2 // Zapisanie referencji do obiektu na szczycie stosu w lokalnej zmiennej o indeksie 2
   L2
    LINENUMBER 20 L2
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream; // Uzyskanie dostępu do statycznego pola out klasy System przy użyciu instrukcji GETSTATIC
    LDC "Przed sortowaniem: " // Ładowanie stałej ciągu znaków "Przed sortowaniem: " na stos przy użyciu instrukcji LDC
    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V // Wywołanie metody println na obiekcie PrintStream znajdującym się na szczycie stosu przy użyciu instrukcji INVOKEVIRTUAL
   L3
    LINENUMBER 21 L3
    ALOAD 2 // Wczytanie referencji do tablicy znajdującej się w lokalnej zmiennej 2 na stos przy użyciu instrukcji ALOAD
    ASTORE 3 // Skopiowanie referencji tablicy na stos i zapisanie jej w lokalnej zmiennej 3 przy użyciu instrukcji ASTORE
    ALOAD 3 // Wczytanie długości tablicy na stos przy użyciu instrukcji ALOAD i ARRAYLENGTH
    ARRAYLENGTH
    ISTORE 4 // Zapisanie długości tablicy w lokalnej zmiennej 4 przy użyciu instrukcji ISTORE
    ICONST_0 // Wczytanie wartości 0 na stos przy użyciu instrukcji ICONST_0
    ISTORE 5 // Zapisanie wartości 0 w lokalnej zmiennej 5 przy użyciu instrukcji ISTORE
   L4
   FRAME FULL [[Ljava/lang/String; Main [I [I I I] [] // L4: Oznacza etykietę (label) L4, która służy do skoków warunkowych i bezwarunkowych w programie
                                                         FRAME FULL: Informuje o rozpoczęciu nowej ramki stosu (stack frame) i definiuje jej strukturę
                                                         [[Ljava/lang/String;: Oznacza typ tablicy dwuwymiarowej o elementach typu String
                                                         Main: Oznacza nazwę klasy, w której znajduje się metoda
                                                         [I: Oznacza typ jednowymiarowej tablicy o elementach typu int
                                                         [I: Oznacza kolejną jednowymiarową tablicę o elementach typu int
                                                         I: Oznacza zmienną typu int
                                                         I: Oznacza kolejną zmienną typu int
    ILOAD 4 // Wczytanie wartości ze zmiennej o indeksie 4
    IF_ICMPGE L5 // Porównanie wczytanej wartości ze stosu z wartością ze stosu, oznaczoną jako "ge"
    Jeśli wczytana wartość jest większa lub równa wartości "ge", program skacze do etykiety L5
    ALOAD 3 // Wczytanie referencji do obiektu ze zmiennej o indeksie 3
    ILOAD 5 // Wczytanie wartości ze zmiennej o indeksie 5
    IALOAD // Wczytanie wartości z tablicy o indeksie wczytanym ze stosu
    ISTORE 6 // Zapisanie wczytanej wartości do zmiennej o indeksie 6
   L6
    LINENUMBER 22 L6
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream; // Pobieranie referencji do obiektu PrintStream z klasy System
    ILOAD 6 // Wczytanie wartości ze zmiennej o indeksie 6 na stos
    INVOKEDYNAMIC makeConcatWithConstants(I)Ljava/lang/String; [ // Wywołanie dynamiczne metody makeConcatWithConstants z argumentem typu int, zwracającej obiekt typu String
      // handle kind 0x6 : INVOKESTATIC
      java/lang/invoke/StringConcatFactory.makeConcatWithConstants(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
      // arguments:
      "\u0001 "
    ]
    INVOKEVIRTUAL java/io/PrintStream.print (Ljava/lang/String;)V // INVOKEVIRTUAL java/io/PrintStream.print (Ljava/lang/String;)V:
    Wywołanie metody print na obiekcie PrintStream, przekazując jako argument wcześniej utworzony String
   L7
    LINENUMBER 21 L7
    IINC 5 1 // Zwiększenie wartości zmiennej o indeksie 5 o 1
    GOTO L4 // Skok warunkowy bezwarunkowy do etykiety L4
   L5
    LINENUMBER 25 L5
   FRAME CHOP 3 //  Zmniejszenie rozmiaru bieżącej ramki o 3.
    ALOAD 1 // Wczytanie referencji do obiektu ze zmiennej o indeksie 1 na stos
    ALOAD 2 // Wczytanie referencji do obiektu ze zmiennej o indeksie 2 na stos
    INVOKEVIRTUAL Main.insertionSort ([I)V // Wywołanie metody insertionSort na obiekcie Main, przekazując jako argument tablicę typu int
   L8
    LINENUMBER 27 L8
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream; // Pobranie referencji do obiektu out klasy System typu PrintStream
    LDC "\nPo sortowaniu: " // Załadowanie stałej do stosu, zawierającej tekst "\nPo sortowaniu: "
    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V // Wywołanie metody println na obiekcie PrintStream, przekazując jako argument wcześniej załadowany String
   L9
    LINENUMBER 28 L9
    ALOAD 2 // Wczytanie referencji do obiektu ze zmiennej o indeksie 2 na stos
    ASTORE 3 // Zapisanie referencji ze stosu do zmiennej o indeksie 3
    ALOAD 3 // Wczytanie referencji do obiektu ze zmiennej o indeksie 3 na stos
    ARRAYLENGTH // Pobranie długości tablicy ze stosu
    ISTORE 4 // Zapisanie wartości z wierzchołka stosu (długość tablicy) do zmiennej o indeksie 4
    ICONST_0 // Wczytanie wartości stałej 0 na stos
    ISTORE 5 // Zapisanie wartości 0 do zmiennej o indeksie 5
   L10
   FRAME APPEND [[I I I] // Dodanie nowych elementów do bieżącej ramki
    ILOAD 5 // Wczytanie wartości ze zmiennej o indeksie 5 na stos
    ILOAD 4 // Wczytanie wartości ze zmiennej o indeksie 4 na stos.
    IF_ICMPGE L11 // Porównanie dwóch wartości na stosie i skok warunkowy do etykiety L11, jeśli pierwsza wartość jest większa lub równa drugiej
    ALOAD 3 // Wczytanie referencji do tablicy ze zmiennej o indeksie 3 na stos
    ILOAD 5 // Wczytanie wartości ze zmiennej o indeksie 5 na stos
    IALOAD // Wczytanie wartości z tablicy na podstawie indeksu
    ISTORE 6 // Zapisanie wczytanej wartości do zmiennej o indeksie 6
   L12
    LINENUMBER 29 L12
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream; // Pobranie referencji do obiektu out klasy System typu PrintStream
    ILOAD 6 // Wczytanie wartości ze zmiennej o indeksie 6 na stos
    INVOKEDYNAMIC makeConcatWithConstants(I)Ljava/lang/String; [ //Wywołanie dynamiczne metody makeConcatWithConstants, przyjmującej argument typu int i zwracającej String
      // handle kind 0x6 : INVOKESTATIC
      java/lang/invoke/StringConcatFactory.makeConcatWithConstants(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
      // arguments:
      "\u0001 "
    ]
    INVOKEVIRTUAL java/io/PrintStream.print (Ljava/lang/String;)V // Wywołanie metody print na obiekcie PrintStream, przekazując jako argument wcześniej utworzony String
   L13
    LINENUMBER 28 L13
    IINC 5 1 // Inkrementacja wartości zmiennej o indeksie 5 o 1
    GOTO L10 // Bezwarunkowy skok do etykiety L10
   L11
    LINENUMBER 31 L11
   FRAME CHOP 3 // Usunięcie 3 elementów z bieżącej ramki
    RETURN // Zakończenie metody
   L14
    LOCALVARIABLE num I L6 L7 6 //  Lokalna zmienna o nazwie "num" typu int o indeksie 6, ważna od etykiety L6 do L7
    LOCALVARIABLE num I L12 L13 6 //  Lokalna zmienna o nazwie "num" typu int o indeksie 6, ważna od etykiety L12 do L13
    LOCALVARIABLE args [Ljava/lang/String; L0 L14 0 // Lokalna zmienna o nazwie "args" typu tablica String o indeksie 0, ważna od etykiety L0 do L14
    LOCALVARIABLE main LMain; L1 L14 1 // Lokalna zmienna o nazwie "main" typu Main o indeksie 1, ważna od etykiety L1 do L14
    LOCALVARIABLE array [I L2 L14 2 // Lokalna zmienna o nazwie "array" typu tablica int o indeksie 2, ważna od etykiety L2 do L14
    MAXSTACK = 4 // Maksymalna głębokość stosu wynosi 4. Oznacza to, że w trakcie wykonywania metody maksymalnie na stosie może znajdować się 4 elementy
    MAXLOCALS = 7 // Maksymalna liczba lokalnych zmiennych wynosi 7. Oznacza to, że w metodzie można używać maksymalnie 7 lokalnych zmiennych
}